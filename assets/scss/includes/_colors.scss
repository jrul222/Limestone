$color-undefined: #aaa;
$white: #fff;
$black: #2c2a29;

/// Returns the luminance of `$color` as a float (between 0 and 1)
/// 1 is pure white, 0 is pure black
/// @param {Color} $color - Color
/// @return {Number}
/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef Reference
@function luminance($color) {
  $colors: ( 'red': red($color), 'green': green($color), 'blue': blue($color));
  @each $name, $value in $colors {
    $adjusted: 0;
    $value: $value / 255;
    @if $value < .03928 {
      $value: $value / 12.92;
    } @else {
      $value: ($value + .055) / 1.055;
      $value: pow($value, 2.4);
    }
    $colors: map-merge($colors, ($name: $value));
  }
  @return (map-get($colors, 'red') * .2126) + (map-get($colors, 'green') * .7152) + (map-get($colors, 'blue') * .0722);
}

@function contrast($c1, $c2) {
  $l1: luminance($c1);
  $l2: luminance($c2);
  @if $l1 > $l2 {
    @return ($l1 + .05) / ($l2 + .05);
  }
  @return ($l2 + .05) / ($l1 + .05);
}

// This looks up a color from a scheme OR from the base 
// color map. If you do not pass a scheme, color() assumes
// you want something looked up from the base color map --
// so all of the color names represet colors from the
// color swatches ("wildcat-blue", "light-blue", etc.)
//
// If you want to get the color of something from one of the
// schemes above, you can provide the scheme name as the
// second parameter. 
@function color($name: wildcat-blue, $scheme: $colors) {
  @if map-has-key($scheme, $name) {
    @return map-get($scheme, $name);
  }
  @return $color-undefined;
}



