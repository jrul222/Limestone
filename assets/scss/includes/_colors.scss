/* Colors
/* remember to turn off any unused swatches in atoms>global>colors.twig
/* _______________________________________________________________ */

$color-undefined: #aaaaaa;
$white: #fff;
$black: #2c2a29;

/// Returns the luminance of `$color` as a float (between 0 and 1)
/// 1 is pure white, 0 is pure black
/// @param {Color} $color - Color
/// @return {Number}
/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef Reference
@function luminance($color) {
    $colors: ( 'red': red($color), 'green': green($color), 'blue': blue($color));
    @each $name,
    $value in $colors {
        $adjusted: 0;
        $value: $value / 255;
        @if $value < 0.03928 {
            $value: $value / 12.92;
        }
        @else {
            $value: ($value + .055) / 1.055;
            $value: pow($value, 2.4);
        }
        $colors: map-merge($colors, ($name: $value));
    }
    @return (map-get($colors, 'red') * .2126)+(map-get($colors, 'green') * .7152)+(map-get($colors, 'blue') * .0722);
}

@function contrast($c1,$c2) {
    $l1: luminance($c1);
    $l2: luminance($c2);
    @if $l1 > $l2 {
        @return ($l1 + 0.05) / ($l2 + 0.05);
    }
    @return ($l2 + 0.05) / ($l1 + 0.05);
}

@function color($name: wildcat-blue, $scheme: $colors) {
    @if map-has-key($scheme, $name) {
        @return map-get($scheme, $name);
    }
    @return $color-undefined;
}

@mixin usescheme($textscheme) {
    color: color(text,$textscheme);
    a {
        @include link-colors($d: color(link, $textscheme), $h:color(link-active, $textscheme));
    }
    button, .button {
        border-color: color(button-border,$textscheme);
        background-color: color(button-background,$textscheme);
        color: color(button-text,$textscheme);

        // attach default colors to the anchor-as-button version
        &:link {
            border-color: color(button-border, $textscheme);
            background-color: color(button-background, $textscheme);
            color: color(button-text, $textscheme);
        }
        

        &.button--ghost {
            background-color: transparent;
            color: color(button-border,$textscheme);
        }

        &[disabled] {
            border-color: color(button-disabled-border, $textscheme) !important;
            background-color: color(button-disabled-background, $textscheme) !important;
            color: color(button-disabled-text, $textscheme) !important;

            &.button--ghost {
                background-color: transparent !important;
                // The ghost disabled text is a weird case; we have to 
                // tune it for specific text schemes
                @if $textscheme == $text-colors-dark {
                    color: color(wildcat-white) !important;
                } @else {
                    color: color(button-disabled-text, $textscheme) !important;
                }                
            }
        }

        &:hover {
            border-color: color(button-hover-border, $textscheme);
            background-color: color(button-hover-background, $textscheme);
            color: color(button-hover-text, $textscheme);
        }

        &:active {
            border-color: color(button-active-border, $textscheme);
            background-color: color(button-active-background, $textscheme);
            color: color(button-active-text, $textscheme);
            &.button--ghost {
                color: color(button-active-text,$textscheme);
            }
        }

        &:focus {
            background-color: color(button-focus-background, $textscheme);
            border-color: color(button-focus-border, $textscheme);
            color: color(button-focus-text, $textscheme);
            outline: none;

            &.button--ghost {
                background-color: transparent;
                // Like disabled ghost, the focus state is quite different
                // and we need some extra tuning                
                @if $textscheme == $text-colors-dark {
                    color: color(wildcat-white);
                }
                @else {
                    color: color(button-focus-text, $textscheme);
                }
            }
        }
    }
}

@mixin ondark() {
    warning: "ondark-depricated";
    @include usescheme($text-colors-dark);
}



